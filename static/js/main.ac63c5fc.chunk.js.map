{"version":3,"sources":["types/Status.ts","App.tsx","components/TodoFilter/TodoFilter.tsx","components/Footer/Footer.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/fetchClient.ts","types/ErrorTypes.ts","api/todos.ts","components/Notification/Notification.tsx","components/TodoTable/TodoTable.tsx","index.tsx"],"names":["Status","App","className","TodoFilter","filterType","setFilterType","onFilterChange","status","data-cy","to","classNames","selected","All","onClick","Active","Completed","Footer","countNotCompleted","hasCompleted","handleClearCompleted","type","TodoItem","todo","deleteTodo","changeCheckbox","changeTitle","id","title","completed","useState","isEditing","setIsEditing","titleEdit","setTitleEdit","handleChangeTitleBlur","editing","checked","onChange","onDoubleClick","aria-label","placeholder","value","event","target","onBlur","onKeyUp","e","key","TodoList","todos","map","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorTypes","client","todoId","updateTodo","Notification","error","isNotificationVisible","setIsNotificationVisible","hidden","TodoTable","setTodos","query","setQuery","NONE","setError","user","setUser","some","activeTodos","filter","completedTodos","allCompleted","every","length","handleGetUser","a","userFromServer","LoadUser","handleGetTodos","listOfTodos","LOAD","useEffect","filteredTodos","handleAddTodo","useCallback","trim","INPUT","dataNewTodo","userId","newTodo","prevTodos","ADD","handleDeleteTodo","currentTodos","currentTodo","DELETE","handleCheckbox","curTodos","curTodo","PATCH","handleChangeTitle","newTitle","name","onSubmit","preventDefault","forEach","htmlFor","ReactDOM","render","path","element","replace","index","document","getElementById"],"mappings":"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","file":"static/js/main.ac63c5fc.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","/* eslint-disable jsx-a11y/control-has-associated-label */\n\nimport { Outlet } from 'react-router-dom';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"todoapp\">\n      <Outlet />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  filterType: Status,\n  setFilterType: (value: Status) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({ filterType, setFilterType }) => {\n  const onFilterChange = (status: Status) => () => {\n    setFilterType(status);\n  };\n\n  return (\n    <ul\n      className=\"filters\"\n      data-cy=\"todosFilter\"\n    >\n      <li>\n        <Link\n          to=\"/\"\n          className={classNames({ selected: filterType === Status.All })}\n          onClick={onFilterChange(Status.All)}\n        >\n          All\n        </Link>\n      </li>\n\n      <li>\n        <Link\n          to=\"/active\"\n          className={classNames({ selected: filterType === Status.Active })}\n          onClick={onFilterChange(Status.Active)}\n        >\n          Active\n        </Link>\n      </li>\n\n      <li>\n        <Link\n          to=\"/completed\"\n          className={classNames({ selected: filterType === Status.Completed })}\n          onClick={onFilterChange(Status.Completed)}\n        >\n          Completed\n        </Link>\n      </li>\n    </ul>\n  );\n};\n","import { Status } from '../../types/Status';\nimport { TodoFilter } from '../TodoFilter/TodoFilter';\n\ntype Props = {\n  countNotCompleted: number,\n  hasCompleted: boolean,\n  filterType: Status,\n  setFilterType: (value: Status) => void,\n  handleClearCompleted: () => void,\n};\n\nexport const Footer: React.FC<Props> = ({\n  countNotCompleted,\n  hasCompleted,\n  filterType,\n  setFilterType,\n  handleClearCompleted,\n}) => {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${countNotCompleted} items left`}\n      </span>\n\n      <TodoFilter\n        filterType={filterType}\n        setFilterType={setFilterType}\n      />\n\n      {hasCompleted\n        && (\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={handleClearCompleted}\n          >\n            Clear completed\n          </button>\n        )}\n    </footer>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport { useState } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  deleteTodo: (todoId: number) => void,\n  changeCheckbox: (id: number, value: boolean) => void,\n  changeTitle: (id: number, newTitle: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  deleteTodo,\n  changeCheckbox,\n  changeTitle,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [titleEdit, setTitleEdit] = useState(title);\n\n  const onDeleteTodo = () => {\n    deleteTodo(id);\n  };\n\n  const onChangeCheckbox = () => {\n    changeCheckbox(id, completed);\n  };\n\n  const onEditTitle = () => {\n    setIsEditing(true);\n  };\n\n  const handleChangeTitleBlur = () => {\n    if (titleEdit === '') {\n      deleteTodo(id);\n\n      return;\n    }\n\n    if (title !== titleEdit) {\n      changeTitle(id, titleEdit);\n    }\n\n    setIsEditing(false);\n  };\n\n  const onChangeTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitleEdit(event.target.value);\n  };\n\n  const handleKeyUp = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      setIsEditing(false);\n      setTitleEdit(title);\n    }\n\n    if (e.key === 'Enter' || e.key === '') {\n      handleChangeTitleBlur();\n    }\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed,\n        editing: isEditing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id=\"toggle-view\"\n          checked={completed}\n          onChange={onChangeCheckbox}\n        />\n        <label\n          onDoubleClick={onEditTitle}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          aria-label=\"delete-button\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={onDeleteTodo}\n        />\n      </div>\n      {isEditing\n        && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            placeholder=\"Edit todo\"\n            value={titleEdit}\n            onChange={onChangeTitleInput}\n            onBlur={handleChangeTitleBlur}\n            onKeyUp={handleKeyUp}\n          />\n        )}\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  deleteTodo: (todoId: number) => void,\n  changeCheckbox: (id: number, value: boolean) => void,\n  changeTitle: (id: number, newTitle: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  deleteTodo,\n  changeCheckbox,\n  changeTitle,\n}) => {\n  return (\n    <ul className=\"todo-list\" data-cy=\"todosList\">\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          deleteTodo={deleteTodo}\n          changeCheckbox={changeCheckbox}\n          changeTitle={changeTitle}\n        />\n      ))}\n    </ul>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable no-shadow */\nexport enum ErrorTypes {\n  NONE = '',\n  ADD = 'Unable to add a todo',\n  DELETE = 'Unable to delete a todo',\n  LOAD = 'Unable to load a todo',\n  INPUT = 'Title can\\'t be empty',\n  PATCH = 'Unable to update a todo',\n  LoadUser = 'Unable to load a user',\n}\n","import { Todo } from '../types/Todo';\nimport { TodoUpdate } from '../types/TodoUpdate';\nimport { User } from '../types/User';\nimport { UserResponse } from '../types/UserResponse';\nimport { client } from '../utils/fetchClient';\n\nexport const createUser = (data: User) => {\n  return client.post<User>('/users', data);\n};\n\nexport const getUser = (userId: number) => {\n  return client.get<UserResponse>(`/users/${userId}`);\n};\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const postTodo = (data: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (todoId: number, data: TodoUpdate) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n","import classNames from 'classnames';\nimport { useState } from 'react';\nimport { ErrorTypes } from '../../types/ErrorTypes';\n\ntype Props = {\n  error: ErrorTypes | null,\n};\n\nexport const Notification: React.FC<Props> = ({ error }) => {\n  const [isNotificationVisible, setIsNotificationVisible] = useState(true);\n\n  const onHiddenError = () => {\n    setIsNotificationVisible(false);\n  };\n\n  return (\n    <div className={classNames(\n      'notification is-danger is-light has-text-weight-normal',\n      { hidden: !isNotificationVisible },\n    )}\n    >\n      <button\n        type=\"button\"\n        className=\"delete\"\n        aria-label=\"Mute volume\"\n        onClick={onHiddenError}\n      />\n\n      {error}\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, {\n  FormEvent, useCallback, useEffect, useState,\n} from 'react';\nimport { Footer } from '../Footer/Footer';\nimport { TodoList } from '../TodoList/TodoList';\nimport { Status } from '../../types/Status';\nimport {\n  deleteTodo, getTodos, getUser, postTodo, updateTodo,\n} from '../../api/todos';\nimport { ErrorTypes } from '../../types/ErrorTypes';\nimport { Notification } from '../Notification/Notification';\nimport { UserResponse } from '../../types/UserResponse';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoTable: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [filterType, setFilterType] = useState<Status>(Status.All);\n  const [error, setError] = useState<ErrorTypes>(ErrorTypes.NONE);\n  const [user, setUser] = useState<UserResponse | null>(null);\n\n  const hasCompleted = todos.some(todo => todo.completed);\n  const activeTodos = todos.filter(todo => !todo.completed);\n  const completedTodos = todos.filter(todo => todo.completed);\n  const allCompleted = todos.every(todo => todo.completed);\n  const countNotCompleted = activeTodos.length;\n\n  const USER_ID = 66;\n\n  const handleGetUser = async () => {\n    setError(ErrorTypes.NONE);\n\n    try {\n      const userFromServer = await getUser(USER_ID);\n\n      setUser(userFromServer);\n    } catch {\n      setError(ErrorTypes.LoadUser);\n    } finally {\n      setTimeout(() => setError(ErrorTypes.NONE), 3000);\n    }\n  };\n\n  const handleGetTodos = async () => {\n    setError(ErrorTypes.NONE);\n    try {\n      const listOfTodos = await getTodos(USER_ID);\n\n      setTodos(listOfTodos);\n    } catch {\n      setError(ErrorTypes.LOAD);\n    } finally {\n      setTimeout(() => setError(ErrorTypes.NONE), 3000);\n    }\n  };\n\n  useEffect(() => {\n    handleGetUser();\n    handleGetTodos();\n  }, []);\n\n  const filteredTodos = todos.filter(todo => {\n    switch (filterType) {\n      case Status.Active:\n        return !todo.completed;\n\n      case Status.Completed:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n\n  const handleAddTodo = useCallback(async (title: string) => {\n    setError(ErrorTypes.NONE);\n\n    try {\n      if (!title.trim()) {\n        setError(ErrorTypes.INPUT);\n\n        return;\n      }\n\n      const dataNewTodo = {\n        userId: USER_ID,\n        title,\n        completed: false,\n      };\n\n      const newTodo = await postTodo(dataNewTodo);\n\n      setTodos(prevTodos => [...prevTodos, newTodo]);\n    } catch {\n      setError(ErrorTypes.ADD);\n    }\n  }, []);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (query !== '') {\n      handleAddTodo(query);\n    }\n\n    setQuery('');\n  };\n\n  const handleDeleteTodo = useCallback(async (todoId: number) => {\n    setError(ErrorTypes.NONE);\n\n    try {\n      await deleteTodo(todoId);\n\n      setTodos(currentTodos => currentTodos\n        .filter(currentTodo => currentTodo.id !== todoId));\n    } catch {\n      setError(ErrorTypes.DELETE);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const handleCheckbox = async (id: number, value: boolean) => {\n    setError(ErrorTypes.NONE);\n    try {\n      await updateTodo(id, { completed: !value });\n\n      setTodos(curTodos => curTodos.map(curTodo => {\n        if (curTodo.id !== id) {\n          return curTodo;\n        }\n\n        return {\n          ...curTodo,\n          completed: !value,\n        };\n      }));\n    } catch {\n      setError(ErrorTypes.PATCH);\n    }\n  };\n\n  const handleChangeTitle = async (id: number, newTitle: string) => {\n    setError(ErrorTypes.NONE);\n\n    try {\n      await updateTodo(id, { title: newTitle });\n\n      setTodos(curTodos => curTodos.map(curTodo => {\n        if (curTodo.id !== id) {\n          return curTodo;\n        }\n\n        return {\n          ...curTodo,\n          title: newTitle,\n        };\n      }));\n    } catch {\n      setError(ErrorTypes.PATCH);\n    }\n  };\n\n  const handleToogleAll = () => {\n    if (activeTodos.length === 0) {\n      completedTodos.forEach(todo => handleCheckbox(todo.id, todo.completed));\n    } else {\n      activeTodos.forEach(todo => handleCheckbox(todo.id, todo.completed));\n    }\n  };\n\n  const handleClearCompleted = () => {\n    completedTodos.forEach(todo => handleDeleteTodo(todo.id));\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>{`${user ? `${user.name}'s` : ''} todos`}</h1>\n\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            data-cy=\"createTodo\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={query}\n            onChange={handleInputChange}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        {todos.length > 0\n      && (\n        <>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className={classNames('toggle-all', { 'is-active': allCompleted })}\n            data-cy=\"toggleAll\"\n            checked={allCompleted}\n            onChange={handleToogleAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        </>\n      )}\n\n        <TodoList\n          todos={filteredTodos}\n          deleteTodo={handleDeleteTodo}\n          changeCheckbox={handleCheckbox}\n          changeTitle={handleChangeTitle}\n        />\n      </section>\n\n      {todos.length > 0\n    && (\n      <Footer\n        countNotCompleted={countNotCompleted}\n        hasCompleted={hasCompleted}\n        filterType={filterType}\n        setFilterType={setFilterType}\n        handleClearCompleted={handleClearCompleted}\n      />\n    )}\n\n      {error\n        && (\n          <Notification error={error} />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport {\n  HashRouter, Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { TodoTable } from './components/TodoTable/TodoTable';\n\nReactDOM.render(\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route index element={<TodoTable />} />\n        <Route path=\"active\" element={<TodoTable />} />\n        <Route path=\"completed\" element={<TodoTable />} />\n      </Route>\n    </Routes>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}